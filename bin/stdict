#!/usr/bin/env python3

import os
import sys
import argparse

import requests
from lxml.html import fromstring

__version__ = '0.01a'

COLORS = {'red': 31, 'green': 32, 'yellow': 33, 'blue': 34, 'white': 1, 'underline': 4}

class App():

    def __init__(self):
        arg_parser = argparse.ArgumentParser(description='Console dictionary word lookup')
        arg_parser.add_argument('word', type=str, help='Word to lookup')
        arg_parser.add_argument('--no-color', action='store_true', default=False)
        arg_parser.add_argument('--examples', type=int, default=3, help='Number of word usage examples to display')
        arg_parser.add_argument('--noun', action='store_true', default=False)
        arg_parser.add_argument('--verb', action='store_true', default=False)
        arg_parser.add_argument('--adj', action='store_true', default=False)
        arg_parser.add_argument('--adv', action='store_true', default=False)


        self.args = arg_parser.parse_args()

        if not os.path.isdir(self.get_cache_path()):
            os.makedirs(self.get_cache_path())

    def with_color(self, message, color):
        """
        Colored output, "color" argument can be both a color name (see COLORS dict) and
        a color code
        """
        if self.args.no_color:
            return message
        if isinstance(color, str):
            color = COLORS.get(color, 39)
        else:
            color = color
        return "\x1b[%dm%s\x1b[0m" % (color, message)

    def get_cache_path(self):
        return os.path.join(os.path.expanduser('~'), '.stdict-cache')

    def get_cache_filename(self, word):
        return os.path.join(self.get_cache_path(), '%s.cache' % word)

    def is_result_empty(self, html):
        """
        Checks whether the result is empty
        """
        h2 = html.xpath('//h2[@class="searchHeading"]')
        if len(h2) > 0:
            if str(h2[0].text_content()).startswith('No exact matches found'):
                return True
        return False

    def get_definitions(self, section):
        for trg in section.xpath('.//ul[@class="semb"]//li//div[@class="trg"]'):
            span_iteration = trg.xpath('.//p//span[@class="iteration"]')
            if len(span_iteration) == 0: continue
            index = span_iteration[0].text_content() or '1'
            span_ind = trg.xpath('.//span[@class="ind"]')
            if len(span_ind) == 0: continue

            definition = '%s. %s' % (self.with_color(index, 'white'), span_ind[0].text_content()) + '\n'

            examples = []

            for example_item in trg.xpath('.//*[@class="ex"]'):
                examples.append(str(example_item.text_content()))

            examples = examples[0:self.args.examples]

            if len(examples) > 0:
                definition = definition + '\n%s\n\n' % self.with_color('Examples:', 'underline')
                definition = definition + '\n'.join(['  %s' % s for s in examples]) + '\n\n'

            yield definition


    def lookup(self, word):
        """
        Fetches webpage with a word definition and parses it

        Returns tuple where the first variable indicates a status and the second one
        contains text
        """
        pos_args = {'noun': self.args.noun, 'verb': self.args.verb, 'adjective': self.args.adj,
                    'adverb': self.args.adv}
        self.requested_pos = {k:v for (k,v) in pos_args.items() if v}.keys()
        result = self.with_color(word, 'white')

        if os.path.isfile(self.get_cache_filename(word)):
            text = open(self.get_cache_filename(word), 'rt').read()
        else:
            r = requests.get('https://en.oxforddictionaries.com/definition/%s' % word)
            if r.status_code != 200:
                return False, None
            with open(self.get_cache_filename(word), 'wt') as f:
                f.write(r.text)
            text = r.text
        # Parse the result
        html = fromstring(text)
        if self.is_result_empty(html):
            return True, 'No exact matches found for "%s"' % word

        # Pronunciation
        span = html.xpath('//span[@class="phoneticspelling"]')
        if len(span) > 0:
            result = result + ' %s\n\n' % span[0].text_content()

        for section in html.xpath('//section[@class="gramb"]'):
            pos = section.xpath('.//span[@class="pos"]')[0].text_content()
            if len(self.requested_pos) > 0 and pos not in self.requested_pos:
                continue
            result = result + '[%s]\n\n' % self.with_color(pos, 'green')
            # Sense registers is unused now
            span_sense_registers = section.xpath('.//span[@class="sense-registers"]')
            if len(span_sense_registers) > 0:
                sense_registers = span_sense_registers[0].text_content().strip()
            else:
                sense_registers = None

            for definition in self.get_definitions(section):
                result = result + definition

        return True, result

    def run(self):
        status, result = self.lookup(self.args.word)

        if status is False:
            print('Could not lookup word')
            sys.exit(1)

        print(result)

if __name__ == '__main__':
    app = App()
    sys.exit(app.run())
